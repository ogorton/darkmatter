import os
import subprocess
import numpy as np

def run(func, Z, N, controlfilename, dresfile, estart, estop, estep)

def runTemplates(exec_name, input_template, control_template, input_dict,
    control_dict, workdir='', label='runCustom',
    resultfile='eventrate_spectra.dat'):

    """
     Author: Oliver Gorton, 2021

     This is a function for running an executable program with a custom input
     file and a custom control file. An input file is one which is used like
        exec_name < input_file
     while a control file is one which is read by exec_name during runtime.

     The input_template and control_template and modified by replacing keywords
     in a dictionary with their respective values.

     exec_name: (string) containing the path to and name of the
         executable you want to run
     input_template: (string) this is an inputfile template used by the 
         executable and is modified by this function
     control_template: (string) the name of a file ending in '.control'. which
         this function will edit.
     input_dict: (dictionary) of keywords and the values to which those keywords
         will be changed in the input file. The keywords are strings which should 
         appear in the input_template file. 
     control_dict: (dictionary) of keywords and the values to which those keywords
         will be changed in the control file. The keywords are strings which 
         should appear in the control_template file.         
     workdir: (string) name of the working directory where you want to call
         the executable and send the output.
     label: (string) name for this job, to label the input and output files 
         generated by this function.

    """    
    path = os.getcwd()
    os.chdir(workdir)

    if (not os.path.exists(input_template)):
        print("File %s does not exist."%input_template)
        exit()
    if (not os.path.exists("%s"%control_template)):
        print("File %s does not exist."%control_template)
        exit()

    # Control file
    findandreplace = "sed '"
    for keyword in control_dict.keys():
        findandreplace += "s/%s/%s/g;"%(keyword,control_dict[keyword])
    findandreplace += "' %s > %s.control"%(control_template, label)
    returned = subprocess.call(findandreplace, shell=True)    

    # Input file
    findandreplace = "sed '"
    for keyword in input_dict.keys():
        findandreplace += "s/%s/%s/g;"%(keyword,input_dict[keyword])
    findandreplace += "' %s > %s.input"%(input_template,label)
    returned = subprocess.call(findandreplace, shell=True)    

    # Execute
    command = "%s < %s.input > %s.output"%(exec_name,label,label)
    print(command)
    returned = subprocess.call(command,shell=True)
    if(returned != 0): print("Return code: %s"%returned)    

    # Collect output
    RecoilE, EventRate = np.loadtxt(resultfile, unpack=True, skiprows=1)
    os.chdir(path)
    return RecoilE, EventRate    

def runTemplateControl(exec_name, inputfile, control_template, param_dict, 
    workdir='', label='runCustom',resultfile='eventrate_spectra.dat'):

    """
     Author: Oliver Gorton, 2020

     This is a function for running an executable program with a custom
     control file by replacing keywords in a template used by the executed
     code. The control file is one which is used indirectly (not a by a 
     command line pipe). For example, an interaction file for bigstick.

     exec_name: (string) containing the path to and name of the
         executable you want to run
     inputfile: (string) this is an input file used by the executable
     control_template: (string) the base-name of a file ending in '.control'. 
         "<control_template>.template" is the template file which the function 
         will edit and copy into <control_template>.
     param_dict: (dictionary) of keywords and the values to which those keywords
         will be changed. The keywords are strings which should appear in the 
         control_template file. 
     workdir: (string) name of the working directory where you want to call
         the executable and send the output.
     label: (string) name for this job, to label the input and output files 
         generated by this function.

    """

    path = os.getcwd()
    os.chdir(workdir)

    if (not os.path.exists(inputfile)):
        print("File %s does not exist."%inputfile)
        exit()    
    if (not os.path.exists("%s.template"%control_template)):
        print("File %s.template does not exist."%control_template)
        exit()        

    findandreplace = "sed '"
    for keyword in param_dict.keys():
        findandreplace += "s/%s/%s/g;"%(keyword,param_dict[keyword])
    findandreplace += "' %s.template > %s"%(control_template, control_template)
    returned = subprocess.call(findandreplace, shell=True)

    command = "%s < %s > %s.output"%(exec_name, inputfile, label)
    print(command)
    returned = subprocess.call(command,shell=True)

    RecoilE, EventRate = np.loadtxt(resultfile, unpack=True, skiprows=1)

    os.chdir(path)

    return RecoilE, EventRate


def runTemplateInput(exec_name, input_template, param_dict, 
    workdir='', label='runCustom',resultfile='eventrate_spectra.dat'):

    """
     Author: Oliver Gorton, 2020

     This is a function for running an executable program with a custom
     input file by replacing keywords in a template used by the executed
     code.

     exec_name: (string) containing the path to and name of the
         executable you want to run
     input_template: (string) this is an input or control file used by the executable
         and which will be edited by this function
     param_dict: (dictionary) of keywords and the values to which those keywords
         will be changed. The keywords are strings which should appear in the 
         input_template file. 
     workdir: (string) name of the working directory where you want to call
         the executable and send the output.
     label: (string) name for this job, to label the input and output files 
         generated by this function.

    """

    path = os.getcwd()
    os.chdir(workdir)

    # File does not exist error trap
    if (not os.path.exists(input_template)):
        print("File %s does not exist."%input_template)
        exit()

    findandreplace = "sed '"
    for keyword in param_dict.keys():
        findandreplace += "s/%s/%s/g;"%(keyword,param_dict[keyword])
    findandreplace += "' %s > %s.input"%(input_template,label)
    returned = subprocess.call(findandreplace, shell=True)

    command = "%s < %s.input > %s.output"%(exec_name,label,label)
    print(command)
    returned = subprocess.call(command,shell=True)
    print("Return code: %s"%returned)

    RecoilE, EventRate = np.loadtxt(resultfile, unpack=True, skiprows=1)

    os.chdir(path)

    return RecoilE, EventRate
